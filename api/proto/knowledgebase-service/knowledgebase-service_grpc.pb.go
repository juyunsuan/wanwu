// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: proto/knowledgebase-service/knowledgebase-service.proto

package knowledgebase_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KnowledgeBaseService_SelectKnowledgeList_FullMethodName           = "/knowledgebase_service.KnowledgeBaseService/SelectKnowledgeList"
	KnowledgeBaseService_SelectKnowledgeDetailById_FullMethodName     = "/knowledgebase_service.KnowledgeBaseService/SelectKnowledgeDetailById"
	KnowledgeBaseService_SelectKnowledgeDetailByIdList_FullMethodName = "/knowledgebase_service.KnowledgeBaseService/SelectKnowledgeDetailByIdList"
	KnowledgeBaseService_SelectKnowledgeDetailByName_FullMethodName   = "/knowledgebase_service.KnowledgeBaseService/SelectKnowledgeDetailByName"
	KnowledgeBaseService_CreateKnowledge_FullMethodName               = "/knowledgebase_service.KnowledgeBaseService/CreateKnowledge"
	KnowledgeBaseService_UpdateKnowledge_FullMethodName               = "/knowledgebase_service.KnowledgeBaseService/UpdateKnowledge"
	KnowledgeBaseService_DeleteKnowledge_FullMethodName               = "/knowledgebase_service.KnowledgeBaseService/DeleteKnowledge"
	KnowledgeBaseService_KnowledgeHit_FullMethodName                  = "/knowledgebase_service.KnowledgeBaseService/KnowledgeHit"
	KnowledgeBaseService_GetKnowledgeMetaSelect_FullMethodName        = "/knowledgebase_service.KnowledgeBaseService/GetKnowledgeMetaSelect"
	KnowledgeBaseService_GetKnowledgeMetaValueList_FullMethodName     = "/knowledgebase_service.KnowledgeBaseService/GetKnowledgeMetaValueList"
	KnowledgeBaseService_UpdateKnowledgeMetaValue_FullMethodName      = "/knowledgebase_service.KnowledgeBaseService/UpdateKnowledgeMetaValue"
)

// KnowledgeBaseServiceClient is the client API for KnowledgeBaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KnowledgeBaseServiceClient interface {
	// 获取知识库列表
	SelectKnowledgeList(ctx context.Context, in *KnowledgeSelectReq, opts ...grpc.CallOption) (*KnowledgeSelectListResp, error)
	// 获取知识库详情
	SelectKnowledgeDetailById(ctx context.Context, in *KnowledgeDetailSelectReq, opts ...grpc.CallOption) (*KnowledgeInfo, error)
	// 获取知识库详情列表
	SelectKnowledgeDetailByIdList(ctx context.Context, in *KnowledgeDetailSelectListReq, opts ...grpc.CallOption) (*KnowledgeDetailSelectListResp, error)
	// 获取知识库详情
	SelectKnowledgeDetailByName(ctx context.Context, in *KnowledgeDetailSelectReq, opts ...grpc.CallOption) (*KnowledgeInfo, error)
	// 新增知识库
	CreateKnowledge(ctx context.Context, in *CreateKnowledgeReq, opts ...grpc.CallOption) (*CreateKnowledgeResp, error)
	// 修改知识库
	UpdateKnowledge(ctx context.Context, in *UpdateKnowledgeReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除文档知识分类
	DeleteKnowledge(ctx context.Context, in *DeleteKnowledgeReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 知识库命中测试
	KnowledgeHit(ctx context.Context, in *KnowledgeHitReq, opts ...grpc.CallOption) (*KnowledgeHitResp, error)
	// 获取知识库元数据（key + type）
	GetKnowledgeMetaSelect(ctx context.Context, in *SelectKnowledgeMetaReq, opts ...grpc.CallOption) (*SelectKnowledgeMetaResp, error)
	// 获取知识库元数据值列表 (合并过的value)
	GetKnowledgeMetaValueList(ctx context.Context, in *KnowledgeMetaValueListReq, opts ...grpc.CallOption) (*KnowledgeMetaValueListResp, error)
	// 更新知识库元数据值列表
	UpdateKnowledgeMetaValue(ctx context.Context, in *UpdateKnowledgeMetaValueReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type knowledgeBaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKnowledgeBaseServiceClient(cc grpc.ClientConnInterface) KnowledgeBaseServiceClient {
	return &knowledgeBaseServiceClient{cc}
}

func (c *knowledgeBaseServiceClient) SelectKnowledgeList(ctx context.Context, in *KnowledgeSelectReq, opts ...grpc.CallOption) (*KnowledgeSelectListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KnowledgeSelectListResp)
	err := c.cc.Invoke(ctx, KnowledgeBaseService_SelectKnowledgeList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeBaseServiceClient) SelectKnowledgeDetailById(ctx context.Context, in *KnowledgeDetailSelectReq, opts ...grpc.CallOption) (*KnowledgeInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KnowledgeInfo)
	err := c.cc.Invoke(ctx, KnowledgeBaseService_SelectKnowledgeDetailById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeBaseServiceClient) SelectKnowledgeDetailByIdList(ctx context.Context, in *KnowledgeDetailSelectListReq, opts ...grpc.CallOption) (*KnowledgeDetailSelectListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KnowledgeDetailSelectListResp)
	err := c.cc.Invoke(ctx, KnowledgeBaseService_SelectKnowledgeDetailByIdList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeBaseServiceClient) SelectKnowledgeDetailByName(ctx context.Context, in *KnowledgeDetailSelectReq, opts ...grpc.CallOption) (*KnowledgeInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KnowledgeInfo)
	err := c.cc.Invoke(ctx, KnowledgeBaseService_SelectKnowledgeDetailByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeBaseServiceClient) CreateKnowledge(ctx context.Context, in *CreateKnowledgeReq, opts ...grpc.CallOption) (*CreateKnowledgeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateKnowledgeResp)
	err := c.cc.Invoke(ctx, KnowledgeBaseService_CreateKnowledge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeBaseServiceClient) UpdateKnowledge(ctx context.Context, in *UpdateKnowledgeReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, KnowledgeBaseService_UpdateKnowledge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeBaseServiceClient) DeleteKnowledge(ctx context.Context, in *DeleteKnowledgeReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, KnowledgeBaseService_DeleteKnowledge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeBaseServiceClient) KnowledgeHit(ctx context.Context, in *KnowledgeHitReq, opts ...grpc.CallOption) (*KnowledgeHitResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KnowledgeHitResp)
	err := c.cc.Invoke(ctx, KnowledgeBaseService_KnowledgeHit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeBaseServiceClient) GetKnowledgeMetaSelect(ctx context.Context, in *SelectKnowledgeMetaReq, opts ...grpc.CallOption) (*SelectKnowledgeMetaResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SelectKnowledgeMetaResp)
	err := c.cc.Invoke(ctx, KnowledgeBaseService_GetKnowledgeMetaSelect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeBaseServiceClient) GetKnowledgeMetaValueList(ctx context.Context, in *KnowledgeMetaValueListReq, opts ...grpc.CallOption) (*KnowledgeMetaValueListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KnowledgeMetaValueListResp)
	err := c.cc.Invoke(ctx, KnowledgeBaseService_GetKnowledgeMetaValueList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeBaseServiceClient) UpdateKnowledgeMetaValue(ctx context.Context, in *UpdateKnowledgeMetaValueReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, KnowledgeBaseService_UpdateKnowledgeMetaValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KnowledgeBaseServiceServer is the server API for KnowledgeBaseService service.
// All implementations must embed UnimplementedKnowledgeBaseServiceServer
// for forward compatibility.
type KnowledgeBaseServiceServer interface {
	// 获取知识库列表
	SelectKnowledgeList(context.Context, *KnowledgeSelectReq) (*KnowledgeSelectListResp, error)
	// 获取知识库详情
	SelectKnowledgeDetailById(context.Context, *KnowledgeDetailSelectReq) (*KnowledgeInfo, error)
	// 获取知识库详情列表
	SelectKnowledgeDetailByIdList(context.Context, *KnowledgeDetailSelectListReq) (*KnowledgeDetailSelectListResp, error)
	// 获取知识库详情
	SelectKnowledgeDetailByName(context.Context, *KnowledgeDetailSelectReq) (*KnowledgeInfo, error)
	// 新增知识库
	CreateKnowledge(context.Context, *CreateKnowledgeReq) (*CreateKnowledgeResp, error)
	// 修改知识库
	UpdateKnowledge(context.Context, *UpdateKnowledgeReq) (*emptypb.Empty, error)
	// 删除文档知识分类
	DeleteKnowledge(context.Context, *DeleteKnowledgeReq) (*emptypb.Empty, error)
	// 知识库命中测试
	KnowledgeHit(context.Context, *KnowledgeHitReq) (*KnowledgeHitResp, error)
	// 获取知识库元数据（key + type）
	GetKnowledgeMetaSelect(context.Context, *SelectKnowledgeMetaReq) (*SelectKnowledgeMetaResp, error)
	// 获取知识库元数据值列表 (合并过的value)
	GetKnowledgeMetaValueList(context.Context, *KnowledgeMetaValueListReq) (*KnowledgeMetaValueListResp, error)
	// 更新知识库元数据值列表
	UpdateKnowledgeMetaValue(context.Context, *UpdateKnowledgeMetaValueReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedKnowledgeBaseServiceServer()
}

// UnimplementedKnowledgeBaseServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKnowledgeBaseServiceServer struct{}

func (UnimplementedKnowledgeBaseServiceServer) SelectKnowledgeList(context.Context, *KnowledgeSelectReq) (*KnowledgeSelectListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectKnowledgeList not implemented")
}
func (UnimplementedKnowledgeBaseServiceServer) SelectKnowledgeDetailById(context.Context, *KnowledgeDetailSelectReq) (*KnowledgeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectKnowledgeDetailById not implemented")
}
func (UnimplementedKnowledgeBaseServiceServer) SelectKnowledgeDetailByIdList(context.Context, *KnowledgeDetailSelectListReq) (*KnowledgeDetailSelectListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectKnowledgeDetailByIdList not implemented")
}
func (UnimplementedKnowledgeBaseServiceServer) SelectKnowledgeDetailByName(context.Context, *KnowledgeDetailSelectReq) (*KnowledgeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectKnowledgeDetailByName not implemented")
}
func (UnimplementedKnowledgeBaseServiceServer) CreateKnowledge(context.Context, *CreateKnowledgeReq) (*CreateKnowledgeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKnowledge not implemented")
}
func (UnimplementedKnowledgeBaseServiceServer) UpdateKnowledge(context.Context, *UpdateKnowledgeReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKnowledge not implemented")
}
func (UnimplementedKnowledgeBaseServiceServer) DeleteKnowledge(context.Context, *DeleteKnowledgeReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKnowledge not implemented")
}
func (UnimplementedKnowledgeBaseServiceServer) KnowledgeHit(context.Context, *KnowledgeHitReq) (*KnowledgeHitResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KnowledgeHit not implemented")
}
func (UnimplementedKnowledgeBaseServiceServer) GetKnowledgeMetaSelect(context.Context, *SelectKnowledgeMetaReq) (*SelectKnowledgeMetaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKnowledgeMetaSelect not implemented")
}
func (UnimplementedKnowledgeBaseServiceServer) GetKnowledgeMetaValueList(context.Context, *KnowledgeMetaValueListReq) (*KnowledgeMetaValueListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKnowledgeMetaValueList not implemented")
}
func (UnimplementedKnowledgeBaseServiceServer) UpdateKnowledgeMetaValue(context.Context, *UpdateKnowledgeMetaValueReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKnowledgeMetaValue not implemented")
}
func (UnimplementedKnowledgeBaseServiceServer) mustEmbedUnimplementedKnowledgeBaseServiceServer() {}
func (UnimplementedKnowledgeBaseServiceServer) testEmbeddedByValue()                              {}

// UnsafeKnowledgeBaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KnowledgeBaseServiceServer will
// result in compilation errors.
type UnsafeKnowledgeBaseServiceServer interface {
	mustEmbedUnimplementedKnowledgeBaseServiceServer()
}

func RegisterKnowledgeBaseServiceServer(s grpc.ServiceRegistrar, srv KnowledgeBaseServiceServer) {
	// If the following call pancis, it indicates UnimplementedKnowledgeBaseServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KnowledgeBaseService_ServiceDesc, srv)
}

func _KnowledgeBaseService_SelectKnowledgeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KnowledgeSelectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseServiceServer).SelectKnowledgeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseService_SelectKnowledgeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseServiceServer).SelectKnowledgeList(ctx, req.(*KnowledgeSelectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeBaseService_SelectKnowledgeDetailById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KnowledgeDetailSelectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseServiceServer).SelectKnowledgeDetailById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseService_SelectKnowledgeDetailById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseServiceServer).SelectKnowledgeDetailById(ctx, req.(*KnowledgeDetailSelectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeBaseService_SelectKnowledgeDetailByIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KnowledgeDetailSelectListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseServiceServer).SelectKnowledgeDetailByIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseService_SelectKnowledgeDetailByIdList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseServiceServer).SelectKnowledgeDetailByIdList(ctx, req.(*KnowledgeDetailSelectListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeBaseService_SelectKnowledgeDetailByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KnowledgeDetailSelectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseServiceServer).SelectKnowledgeDetailByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseService_SelectKnowledgeDetailByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseServiceServer).SelectKnowledgeDetailByName(ctx, req.(*KnowledgeDetailSelectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeBaseService_CreateKnowledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKnowledgeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseServiceServer).CreateKnowledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseService_CreateKnowledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseServiceServer).CreateKnowledge(ctx, req.(*CreateKnowledgeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeBaseService_UpdateKnowledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKnowledgeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseServiceServer).UpdateKnowledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseService_UpdateKnowledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseServiceServer).UpdateKnowledge(ctx, req.(*UpdateKnowledgeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeBaseService_DeleteKnowledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKnowledgeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseServiceServer).DeleteKnowledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseService_DeleteKnowledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseServiceServer).DeleteKnowledge(ctx, req.(*DeleteKnowledgeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeBaseService_KnowledgeHit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KnowledgeHitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseServiceServer).KnowledgeHit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseService_KnowledgeHit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseServiceServer).KnowledgeHit(ctx, req.(*KnowledgeHitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeBaseService_GetKnowledgeMetaSelect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectKnowledgeMetaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseServiceServer).GetKnowledgeMetaSelect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseService_GetKnowledgeMetaSelect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseServiceServer).GetKnowledgeMetaSelect(ctx, req.(*SelectKnowledgeMetaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeBaseService_GetKnowledgeMetaValueList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KnowledgeMetaValueListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseServiceServer).GetKnowledgeMetaValueList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseService_GetKnowledgeMetaValueList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseServiceServer).GetKnowledgeMetaValueList(ctx, req.(*KnowledgeMetaValueListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeBaseService_UpdateKnowledgeMetaValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKnowledgeMetaValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseServiceServer).UpdateKnowledgeMetaValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseService_UpdateKnowledgeMetaValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseServiceServer).UpdateKnowledgeMetaValue(ctx, req.(*UpdateKnowledgeMetaValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

// KnowledgeBaseService_ServiceDesc is the grpc.ServiceDesc for KnowledgeBaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KnowledgeBaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "knowledgebase_service.KnowledgeBaseService",
	HandlerType: (*KnowledgeBaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SelectKnowledgeList",
			Handler:    _KnowledgeBaseService_SelectKnowledgeList_Handler,
		},
		{
			MethodName: "SelectKnowledgeDetailById",
			Handler:    _KnowledgeBaseService_SelectKnowledgeDetailById_Handler,
		},
		{
			MethodName: "SelectKnowledgeDetailByIdList",
			Handler:    _KnowledgeBaseService_SelectKnowledgeDetailByIdList_Handler,
		},
		{
			MethodName: "SelectKnowledgeDetailByName",
			Handler:    _KnowledgeBaseService_SelectKnowledgeDetailByName_Handler,
		},
		{
			MethodName: "CreateKnowledge",
			Handler:    _KnowledgeBaseService_CreateKnowledge_Handler,
		},
		{
			MethodName: "UpdateKnowledge",
			Handler:    _KnowledgeBaseService_UpdateKnowledge_Handler,
		},
		{
			MethodName: "DeleteKnowledge",
			Handler:    _KnowledgeBaseService_DeleteKnowledge_Handler,
		},
		{
			MethodName: "KnowledgeHit",
			Handler:    _KnowledgeBaseService_KnowledgeHit_Handler,
		},
		{
			MethodName: "GetKnowledgeMetaSelect",
			Handler:    _KnowledgeBaseService_GetKnowledgeMetaSelect_Handler,
		},
		{
			MethodName: "GetKnowledgeMetaValueList",
			Handler:    _KnowledgeBaseService_GetKnowledgeMetaValueList_Handler,
		},
		{
			MethodName: "UpdateKnowledgeMetaValue",
			Handler:    _KnowledgeBaseService_UpdateKnowledgeMetaValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/knowledgebase-service/knowledgebase-service.proto",
}
